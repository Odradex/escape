= stylesheet_link_tag 'application', media:'all','data-turbolinks-track': true
= stylesheet_link_tag 'dhtmlxscheduler_material', media:'all','data-turbolinks-track': true
= javascript_include_tag 'dhtmlxscheduler', 'data-turbolinks-track': true
= javascript_include_tag 'ext/dhtmlxscheduler_limit', 'data-turbolinks-track': true
= javascript_include_tag 'ext/dhtmlxscheduler_recurring', 'data-turbolinks-track': true
.dhx_cal_ltext#user_select
  = select(:user, :user_id, User.pluck(:name, :id), {}, {class: 'selectpicker', 'data-live-search': 'true', 'data-container': 'body'})
.dhx_cal_ltext#room_select
  = select(:room, :room_id, @organization.rooms.pluck(:number, :id), {}, {class: 'selectpicker', 'data-container': 'body'})
.dhx_cal_ltext#service_select
  %select.selectpicker#services-select{'data-container': 'body', multiple: true, 'data-selected-text-format': 'count > 3', 'data-live-search': 'true'}
    - services = Service.all
    - services.categories.keys.each do |category|
      %optgroup{label: category}
        - services.where(category: category).each do |service|
          %option{value: service.id, 'data-subtext': "$#{service.price}/hr."}= service.name
#scheduler_here.dhx_cal_container{style: "width:100%; height:800px;"}
  .dhx_cal_navline
    .dhx_cal_prev_button
    .dhx_cal_next_button Â 
    .dhx_cal_today_button
    .dhx_cal_date
    .dhx_cal_tab{name: "day_tab", style: "right:204px;"}
    .dhx_cal_tab{name: "week_tab", style: "right:140px;"}
    .dhx_cal_tab{name: "month_tab", style: "right:76px;"}
  .dhx_cal_header
  .dhx_cal_data
:javascript
  
  var user_select = $('#user_select')[0].cloneNode(true);
  var room_select = $('#room_select')[0].cloneNode(true);
  var service_select = $('#service_select')[0].cloneNode(true);

  scheduler.form_blocks["user_selector"]={
    render:function(config){
        return user_select.outerHTML;
    },
    set_value:function(node,value,ev,config){
        $("#user_user_id").selectpicker('val', value);
    },
    get_value:function(node,ev,config){
        return node.querySelector("select").value;
    },
    focus:function(node){
        node.querySelector("select").value.focus();
    }
  };

  scheduler.form_blocks["room_selector"]={
    render:function(config){
        return room_select.outerHTML;
    },
    set_value:function(node,value,ev,config){
        $("#room_room_id").selectpicker('val', value);
    },
    get_value:function(node,ev,config){
        return node.querySelector("select").value;
    },
    focus:function(node){
        node.querySelector("select").value.focus();
    }
  };

  scheduler.form_blocks["service_selector"]={
    render:function(config){
        return service_select.outerHTML;
    },
    set_value:function(node,value,ev,config){
        alert(value);
        $("#services-select").selectpicker('val', value);
    },
    get_value:function(node,ev,config){
        console.log($("#services-select").val());
        return $("#services-select").val().join(',');
    },
    focus:function(node){
        node.querySelector("select").value.focus();
    }
  };

  scheduler.config.xml_date="%Y-%m-%d %H:%i";
  scheduler.config.time_step = 15;
  scheduler.config.details_on_dblclick=true;
  scheduler.config.details_on_create=true;
  scheduler.config.select = false;


  var startDate = new Date();
  var endDate = new Date();
  startDate.setDate(startDate.getDate()); 
  endDate.setDate(endDate.getDate()+90);

  scheduler.config.limit_start = new Date(startDate);
  scheduler.config.limit_end = new Date (endDate);
  scheduler.attachEvent("onLimitViolation", function (id, obj){
      dhtmlx.message('The date is not allowed');
      
    });
 
  scheduler.init("scheduler_here", new Date(), "week");
  scheduler.locale.labels.section_details = "Details";
  scheduler.config.lightbox.sections.shift();
  scheduler.config.lightbox.sections.push({name:"User", height:60, type:"user_selector", map_to:"user_id"});
  scheduler.config.lightbox.sections.push({name:"Room", height:60, type:"room_selector", map_to:"room_id"});
  scheduler.config.lightbox.sections.push({name:"Services", height:60, type:"service_selector", map_to:"services"});
  var data_path = "#{calendar_events_path(organization: @organization.id)}"
  scheduler.load(data_path, "json");

  var dp = new dataProcessor(data_path);
  dp.init(scheduler);
  dp.setTransactionMode("REST");